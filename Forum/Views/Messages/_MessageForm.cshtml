@inject UserContext UserContext
@model Forum.Models.IMessageFormViewModel

@if (!(Model.ReplyMessage is null)) {
    <p>In response to this message:</p>
    <partial name="_DisplayMessage" model="Model.ReplyMessage" />
}

<div asp-validation-summary="ModelOnly" class="error"></div>

<div @Html.Raw(!string.IsNullOrEmpty(Model.ElementId) ? $@"id=""{Model.ElementId}""" : string.Empty)>
    <form method="post"
          asp-action="@Model.FormAction"
          asp-controller="@Model.FormController"
          asp-route-returnurl="@ViewData["Referrer"]">

        <input type="hidden" name="Id" value="@Model.Id" />
        <input type="hidden" name="TopicId" value="@Model.TopicId" />

        <div>
            <partial name="../Messages/_MessageFormButtons" />

            <p class="gap-top">
                <span class="warning font-small"></span>
                <span class="error" data-valmsg-for="@nameof(Model.Body)"></span>
            </p>

            <div class="gap-top">
                Posting as
                <div class="user-avatar-small inline">
                    @if (string.IsNullOrEmpty(UserContext.ApplicationUser.AvatarPath)) {
                        <img identicon-value="@UserContext.Id" alt="Identicon" />
                    }
                    else {
                        <img src="@UserContext.ApplicationUser.AvatarPath" />
                    }
                </div>
                @UserContext.ApplicationUser.DisplayName
            </div>
            <p><textarea asp-for="@Model.Body" name="body"></textarea></p>
        </div>

        <p>
            <button class="save-button" message-id="@Model.Id">Save Message</button>
            @if (Model.Id != "0") {
                <cancel-button />
            }
        </p>
    </form>
</div>